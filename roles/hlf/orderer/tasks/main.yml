# ---
  
# Stop all Orderering services
- name: Stop Orderer Service - {{ orderer.name }}
  become: yes
  docker_swarm_service:   
    name: "{{ orderer.name }}"
    state: absent
    networks:
      - "{{swarm_network}}"  

- name: Clean the tlscacerts directory in MSP
  file:
    path: /root/hlft-store/{{orgca.name}}/{{orderer.name}}/msp/tlscacerts
    state: absent

- name: Create the tlscacerts directory in MSP
  file:
    path: /root/hlft-store/{{orgca.name}}/{{orderer.name}}/msp/tlscacerts
    state: directory

- name: Copy tlscacerts
  copy:
    src: /root/hlft-store/{{tlsca.name}}/{{orderer.name}}/tls-msp/tlscacerts/tls-{{tlsca.name}}-7054.pem
    dest: /root/hlft-store/{{orgca.name}}/{{orderer.name}}/msp/tlscacerts/{{tlsca.name}}.{{org.name}}-cert.crt
    remote_src: yes


  # Create & Start service orderer with RAFT enabled
- name: Start the fabric orderer
  become: yes
  docker_swarm_service:
    name: "{{ orderer.name }}"
    hostname: "{{ orderer.name }}"
    networks:
      - "{{swarm_network}}"
    image: "{{orderer.image}}:{{orderer.tag}}"
    mode: replicated
    replicas: "{{orderer.replicas}}"        
    mounts:
      - source: "/root/hlft-store/{{orgca.name}}/{{orderer.name}}"
        target: "{{orderer.path}}"
        type: bind       
      - source: "/root/hlft-store/{{orderer.name}}_cli/artifacts/genesis.block"
        target: "{{orderer.path}}/genesis.block"
        type: bind       
      #  ROOT TLSCA
      - source: "/root/hlft-store/{{tlsca.name}}/tls-cert.pem"
        target: "{{orderer.path}}/tls-cert.pem"
        type: bind 
    publish:
      - published_port: "{{orderer.port}}"
        target_port: "7050"
        protocol: "tcp"     
    env: 
      - "ORDERER_HOME={{orderer.path}}"
      - "ORDERER_HOST={{orderer.name}}"      
      - "ORDERER_GENERAL_LEDGERTYPE=file"
      - "ORDERER_GENERAL_LISTENADDRESS=0.0.0.0"
      - "ORDERER_GENERAL_LISTENPORT=7050"
      - "ORDERER_GENERAL_GENESISMETHOD=file"
      - "ORDERER_GENERAL_GENESISFILE={{orderer.path}}/genesis.block"
      - "ORDERER_GENERAL_LOCALMSPID={{org.name}}MSP"
      - "ORDERER_GENERAL_LOCALMSPDIR={{orderer.path}}/msp"
      - "ORDERER_GENERAL_TLS_ENABLED=true"      
      - "ORDERER_GENERAL_TLS_PRIVATEKEY={{orderer.path}}/msp/tls/server.key" #fully qualified path of the file that contains the server private key
      - "ORDERER_GENERAL_TLS_CERTIFICATE={{orderer.path}}/msp/tls/server.crt" #fully qualified path of the file that contains the server certificate
      - "ORDERER_GENERAL_TLS_ROOTCAS=[{{orderer.path}}/msp/tls/ca.crt]" #fully qualified path of the file that contains the certificate chain of the CA that issued TLS server certificate
      - "ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED=false"
      - "ORDERER_GENERAL_TLS_CLIENTROOTCAS=[{{orderer.path}}/msp/tls/ca.crt]" #fully qualified path of the file that contains the certificate chain of the CA that issued TLS server certificate
      - "ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE={{orderer.path}}/msp/tls/server.crt"
      - "ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY={{orderer.path}}/msp/tls/server.key"
      - "ORDERER_GENERAL_CLUSTER_ROOTCAS=[{{orderer.path}}/msp/tls/ca.crt]"            
      - "ORDERER_FILELEDGER_LOCATION={{orderer.path}}/ledger"
      - "ORDERER_CONSENSUS_WALDIR={{orderer.path}}/wal"
      - "ORDERER_CONSENSUS_SNAPDIR={{orderer.path}}/snap"
      - "FABRIC_LOGGING_SPEC={{LOG_LEVEL}}"
      - "ORDERER_DEBUG_BROADCASTTRACEDIR=data/logs"
      - "CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE={{swarm_network}}"
    working_dir: "{{orderer.path}}"
    placement:      
      constraints:
        - node.role == worker      
    force_update: yes  
  when: orderer.switch == "on"