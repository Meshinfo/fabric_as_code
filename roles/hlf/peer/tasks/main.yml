# ---

# HLF CA Services  with
  # 1. 3x Peer Services 
  # 2. 1x Endorser Peer [replicas=2]
  # 3. 1x Commiter Peer [replicas=2]
  # 4. 1x Anchor Peer [replicas=2]
  
  # Stop all Services services
- name: Stop Peers Service - {{ item.name }}
  become: yes
  become_user: "{{ hlf_username}}"
  docker_swarm_service:   
    name: "{{ item.name }}"
    state: absent
    networks:
      - "{{swarm_network}}"
  loop: 
    - "{{ epeer }}"    
    - "{{ cpeer }}"    
    - "{{ apeer }}"    

  # We create relevent folder structure in S3FS mount locally for service 
- name: Clean Peer folders in hlft-store, if they exists
  become: yes  
  file: 
    path: "{{item.path}}"
    state: absent
  loop:        
    - "{{ epeer }}"    
    - "{{ cpeer }}"    
    - "{{ apeer }}"   

- name: Create Peer Service folders in hlft-store
  become: yes
  file: 
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: 0750
  loop:
    - "{{ epeer }}"    
    - "{{ cpeer }}"    
    - "{{ apeer }}"



  # Copy the relevent scripts
- name: Copy scripts
  become: yes
  copy:
    src: "peer.sh"
    dest: "/home/{{ hlf_username}}/hlft-store/{{item.name}}/peer.sh"
    owner: "{{item.name}}"
    group: "{{item.group}}"
    mode: "0500"
    force: yes
  loop: 
    - "{{ epeer }}"    
    - "{{ cpeer }}"    
    - "{{ apeer }}"

- name: Copy MSP folder
  become: yes
  copy:
    src: "/home/{{ hlf_username}}/hlft-store/{{item.caname}}/client/{{item.name}}/"
    dest: "/home/{{ hlf_username}}/hlft-store/{{item.name}}/msp"
    owner: "{{item.name}}"
    group: "{{item.group}}"
    mode: '0750'
    remote_src: yes
    force: yes
  loop: 
    - "{{ epeer }}"
    - "{{ cpeer }}"
    - "{{ epeer }}"

 # Copy relevent config files to s3fs directories for the docker services
- name: Config templating core.yaml for Peers
  become: yes
  vars:
    peer_config: "{{item}}"
  template:
    src: core.yaml.j2
    dest: "/home/{{ hlf_username }}/hlft-store/{{item.name}}/core.yaml"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: 0600
    force: yes
  loop:
    - "{{ epeer }}"    
    - "{{ cpeer }}"    
    - "{{ apeer }}"

- name: Ensures /home/{{ hlf_username}}/hlft-store/{{item.name}}/tls dir exists
  file: 
    path: /home/{{ hlf_username}}/hlft-store/{{item.name}}/tls 
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: 0750
    force: yes    
  loop: 
    - "{{ epeer }}"    
    - "{{ cpeer }}"    
    - "{{ apeer }}"

  # Create & Start services for Peers 
- name: Fabric Service - {{ item }}
  become: yes
  become_user: "{{ hlf_username}}"  
  docker_swarm_service:
    user: "{{ item.name }}"     
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    networks:
      - "{{swarm_network}}"
    image: "{{item.name}}:{{item.tag}}"
    mode: replicated
    replicas: "{{item.replicas}}"
    publish:
      - published_port: "{{item.port}}"
        target_port: "7054"
        protocol: "tcp"
    command: >
      bash -c "/home/{{item.name}}/peer.sh;"
    mounts:
      - source: "/home/{{ hlf_username}}/hlft-store/{{item.name}}"
        target: "/home/{{item.name}}"
        type: bind
      - source: "/home/{{ hlf_username}}/hlft-store/{{item.caname}}/tls-cert.pem"
        target: "/home/{{item.name}}/tls/tls-{{item.caname}}-cert.pem"
        type: bind
    env: 
      - "FABRIC_CFG_PATH=/home/{{item.name}}"
      - "ORDERER_HOST={{orderer.name}}"
      - "ORDERER_PORT={{orderer.port}}"
    placement:      
      constraints:
        - node.role == worker      
    force_update: yes
  loop: 
    #- "{{ epeer }}"    
     - "{{ cpeer }}"    
    # - "{{ apeer }}"