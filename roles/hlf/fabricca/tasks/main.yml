---

# HLF CA Services  with
  # 1. 1x Root CA [replicas = 1]
  # 2. 2x intermediate CAs
    # 2.1. 1x Agent: registers agents such and peers, orderers and others [replicas = 1]
    # 2.2. 2x User: registers users of Blockchain application [replicas =2]

  # We create relevent folder structure in S3FS mount locally for service {{ rca.name }}

- name: Clean Fabric CA Server folders in hlft-store, if they exists
  become: yes
  file: 
    path: "{{item}}"
    state: absent
  loop:        
        - "/home/{{ hlf_username }}/hlft-store/{{rca.name}}"
        - "/home/{{ hlf_username }}/hlft-store/{{aica.name}}"
        - "/home/{{ hlf_username }}/hlft-store/{{uica.name}}"

- name: Create Fabric CA Server folders in hlft-store
  become: yes
  file: 
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0750
  loop:
        - {path: "/home/{{ hlf_username }}/hlft-store/{{rca.name}}", owner: "{{rca.name}}", group: "{{ hlf_group}}"}
        - {path: "/home/{{ hlf_username }}/hlft-store/{{aica.name}}", owner: "{{aica.name}}", group: "{{ hlf_group}}"}
        - {path: "/home/{{ hlf_username }}/hlft-store/{{uica.name}}", owner: "{{uica.name}}", group: "{{ hlf_group}}"}

 # Copy relevent config files to s3fs directories for the docker services
- name: Config templating
  become: yes
  vars:
    ca_config: "{{item}}"
  template:
    src: fabric-ca-server-config.yaml.j2
    dest: "/home/{{ hlf_username }}/hlft-store/{{item.name}}/fabric-ca-server-config.yaml"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: 0600
    force: yes
  loop:
    - "{{ rca }}"
    - "{{ aica }}"
    - "{{ uica }}"

  # Create & Start service root ca 
- name: Fabric CA - {{ item }}
  become: yes
  become_user: "{{ hlf_username}}"
  vars:
    ca_home: "FABRIC_CA_HOME=/home/{{item.name}}/fabric-ca"
  docker_swarm_service:
    user: "{{ item.name }}"     
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    networks:
      - "{{swarm_network}}"
    image: "{{item.name}}:{{item.tag}}"
    mode: replicated
    replicas: "{{item.replicas}}"
    publish:
      - published_port: "{{item.ca.port}}"
        target_port: "7054"
        protocol: "tcp"
    command: "bash -c"
    mounts:
      - source: "/home/{{ hlf_username}}/hlft-store/{{item.name}}"
        target: "/home/{{item.name}}/fabric-ca"
        type: bind
    env: "{{ca_home}}"
    args:
      - "{{cacreds[item.name].commands}}"
    force_update: yes
  loop: 
    - "{{ rca }}"


# Pause starting the intermediate cas, so that we have the root ca stated and cert files generated
- name: Wait until Root CA is running
  wait_for:
    port: "{{rca.ca.port}}"
    delay: 10
    timeout: 60

  # Create & Start service intermediate ca 
- name: Fabric CA - {{ item.name }}
  become: yes
  become_user: "{{ hlf_username}}"
  vars:
    ca_home: "FABRIC_CA_HOME=/home/{{item.name}}/fabric-ca"
  docker_swarm_service:
    user: "{{ item.name }}"     
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    networks:
      - "{{swarm_network}}"
    image: "{{item.name}}:{{item.tag}}"
    mode: replicated
    replicas: "{{item.replicas}}"
    publish:
      - published_port: "{{item.ca.port}}"
        target_port: "7054"
        protocol: "tcp"
    command: "bash -c"
    mounts:
      - source: "/home/{{ hlf_username}}/hlft-store/{{item.name}}"
        target: "/home/{{item.name}}/fabric-ca"
        type: bind
      - source: "/home/{{ hlf_username}}/hlft-store/{{item.ca.parent}}/ca-cert.pem"
        target: "/home/{{item.name}}/fabric-ca/ca-{{item.ca.parent}}-cert.pem"
        type: bind
    env: "{{ca_home}}"
    args:
      - "{{cacreds[item.name].commands}}"
    force_update: yes
  loop: 
    - "{{ aica }}"
    - "{{ uica }}"

