# ---

# HLF CA Services 

# Stop all CA services
- name: Stop Fabric CA - {{ item.name }}
  become: yes
  docker_swarm_service:   
    name: "{{ item.name }}"
    state: absent
    networks:
      - "{{swarm_network}}"
  loop: "{{ caservices }}"

  # We create relevent folder structure in mount locally for service
- name: Clean Fabric CA Server folders in hlft-store, if they exists
  become: yes  
  file: 
    path: "/root/hlft-store/{{item.name}}"
    state: absent
  loop: "{{ caservices }}"

- name: Create Fabric CA Server folders in hlft-store
  become: yes
  file: 
    path: "/root/hlft-store/{{item.name}}"
    state: directory
    mode: 0750
  loop: "{{ caservices }}"

# Create & Start service TLS CA 
- name: Fabric CA - {{ item }}
  become: yes
  docker_swarm_service:
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    networks:
      - "{{swarm_network}}"
    image: "{{item.image}}:{{item.tag}}"
    mode: replicated
    replicas: "{{item.replicas}}"
    command: 
      bash -c "fabric-ca-server start -b ca-admin-{{item.name}}:{{item.password}} --port 7054 --loglevel {{LOG_LEVEL}}" 
    mounts:
      - source: "/root/hlft-store/{{item.name}}"
        target: "{{item.path}}"
        type: bind
    publish:
      - published_port: "{{item.port}}"
        target_port: "7054"
        protocol: "tcp"
    env:
      - "FABRIC_CA_SERVER_HOME={{item.path}}"
      - "FABRIC_CA_SERVER_TLS_ENABLED=true"
      - "FABRIC_CA_SERVER_CSR_CN={{item.name}}"
      - "FABRIC_CA_SERVER_CSR_HOSTS={{item.name}}"
      - "FABRIC_CA_SERVER_CA_NAME={{item.name}}"  
      - "FABRIC_CA_SERVER_DB_DATASOURCE={{item.path}}/fabric-ca-server.db"    
    placement:      
      constraints:
        - node.role == worker   
    force_update: yes   
  loop: "{{ caservices }}"
  when: item.switch == "on"

# Pause for 5 seconds for the CAs to start
- pause:
    seconds: 5