---

- name: Clean Postgres Server folders in hlft-store, if they exisits
  become: yes
  file: 
    path: "{{item}}"
    state: absent
  loop:        
        - "/home/{{ hlf_username }}/hlft-store/{{psql.name}}"        

- name: Create Postgres Server folders in hlft-store
  become: yes
  file: 
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0750
  loop:
        - {path: "/home/{{ hlf_username }}/hlft-store/{{psql.name}}", owner: "{{psql.name}}", group: "{{ hlf_group}}"}

# Copy relevent config files to s3fs directories for the postgres docker services
- name: Config templating
  become: yes
  vars:
    psql_config: "{{item}}"
  template:
    src: postgres.conf.j2
    dest: "/home/{{ hlf_username }}/hlft-store/{{item.name}}/postgres.conf"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: 0600
    force: yes
  loop:
    - "{{ psql }}"

  # Create & Start service postgres
- name: Postgres - {{ item }}
  become: yes
  become_user: "{{ hlf_username}}"
  docker_swarm_service:
    user: "{{ item.name }}"     
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    networks:
      - "{{swarm_network}}"
    image: "{{item.image}}:{{item.tag}}"
    mode: replicated
    replicas: "{{item.replicas}}"
    publish:
      - published_port: "{{item.port}}"
        target_port: "5432"
        protocol: "tcp"
    command: "bash -c"
    mounts:
      - source: "/home/{{ hlf_username}}/hlft-store/{{item.name}}"
        target: "/home/{{item.name}}/psql"
        type: bind
    args:
      - "{{cacreds[item.name].commands}}"
    force_update: yes
  loop: 
    - "{{ psql }}"