---

# Docker Swarm would be nodes setup

  # Update & Upgrade the nodes
- name: Update and upgrade apt packages
  become: yes
  apt:
    #upgrade: yes
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: Update and upgrade yum packages
  become: yes
  yum:
    #upgrade: yes
    update_cache: yes
  when: ansible_os_family == 'RedHat'
  
  # Setup relevent repos
- name: Set up the golang APT repository
  become: yes
  apt_repository:
    repo: ppa:longsleep/golang-backports
    state: present
  when: ansible_os_family == 'Debian'  

- name: Set up the golang YUM GPG key
  become: yes
  rpm_key: 
    key: https://mirror.go-repo.io/centos/RPM-GPG-KEY-GO-REPO
    state: present
  when: ansible_os_family == 'RedHat'

- name: Set up the Docker CE YUM repository
  become: yes
  get_url:
    url: https://mirror.go-repo.io/centos/go-repo.repo
    dest: /etc/yum.repos.d/go-repo.repo
  when: ansible_os_family == 'RedHat'

  # Install the packages specified in defaults/main.yml
- name: Install prerequisites for Debian distros
  become: yes
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop: "{{ debian_package_list }}"
  when: ansible_os_family == 'Debian'

- name: Install prerequisites for RedHat distros
  become: yes
  yum:
    name: "{{ item }}"
    state: present
  loop: "{{ redhat_package_list }}"
  when: ansible_os_family == 'RedHat'

- name: Install docker driver for python.
  become: yes
  pip:
    name: "{{ item }}"
  loop: "{{ pip_packages }}"


  # Create system users and groups on each node, that would be used to spawn swarm and  deploy hlf services
- name: Create group {{ docker_group }}
  become: yes
  group:
    name: "{{ docker_group }}"
    gid: "{{ docker_gid }}"
    state: present

- name: Create user {{ hlf_username }}
  become: yes
  user:
    name: "{{ hlf_username }}"
    uid: "{{ hlf_uid }}"
    state: present

- name: Create group {{ hlf_group }}
  become: yes
  group:
    name: "{{ hlf_group }}"
    gid: "{{ hlf_gid }}"
    state: present

- name: Add {{ hlf_username }} to group {{ hlf_group }}
  become: yes
  user:
    name: "{{ hlf_username }}"
    groups: 
      - "{{ hlf_group }}"
      - "{{ docker_group }}"
    append: yes

# Giving rx rights to other group members, so that they will be able to read into the folder
- name: Give user {{ hlf_username }} HOME dir rx rights to group {{ hlf_group }}
  become: yes
  file:
    path: "/home/{{ hlf_username }}"
    state: directory
    owner: "{{ hlf_username }}"
    group: "{{ hlf_group }}"
    mode: 0750

# Creating Service Users on swarm manager prime
- name: Create Service Uses {{item.name}}
  become: yes
  user:
    name: "{{ item.name }}"
    uid: "{{ item.uid }}"
    group: "{{ hlf_group }}"
    state: present
  with_items:
    - "{{services}}"
  when: "inventory_hostname in groups.swarm_manager_prime"


  # Docker Swarm & Services modules needs the GOLANG GOPATH to be set
- name: Set GOPATH ENV variable
  become: yes
  become_user: "{{hlf_username}}"
  lineinfile: 
    dest: /home/{{hlf_username}}/.bashrc
    insertafter: EOF
    line: "export GOPATH=/home/{{hlf_username}}/.go"

- name: Creates GOPATH workspace directory
  become: yes
  become_user: "{{hlf_username}}"
  file:
    path: /home/{{hlf_username}}/.go
    state: directory
    owner: "{{hlf_username}}"
    group: "{{hlf_group}}"
    mode: 0775

  # In order for S3FS filesystem to be mounted into docker services from local mounts, user_allow_other option needs to be set in /etc/fuse.conf
- name: Set user_allow_other option in /etc/fuse.conf
  become: yes
  become_user: "root"
  lineinfile: 
    dest: /etc/fuse.conf
    insertafter: EOF
    line: "user_allow_other"